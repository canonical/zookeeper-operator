# Copyright 2023 Canonical Ltd.
# See LICENSE file for licensing details.

[tox]
no_package = True
skip_missing_interpreters = True
env_list = lint, unit

[vars]
application = zookeeper
src_path = {tox_root}/src
tests_path = {tox_root}/tests
lib_path = {tox_root}/lib/charms/zookeeper
all_path = {[vars]src_path} {[vars]tests_path}

[testenv]
allowlist_externals =
    /bin/bash
    poetry
set_env =
    PYTHONPATH = {tox_root}/lib:{[vars]src_path}
    PYTHONBREAKPOINT=ipdb.set_trace
    PY_COLORS=1
    provider: TEST_FILE=test_provider.py
    password-rotation: TEST_FILE=test_password_rotation.py
    tls: TEST_FILE=test_tls.py
    upgrade: TEST_FILE=test_upgrade.py
    ha: TEST_FILE=ha/test_ha.py
pass_env =
    PYTHONPATH
    CHARM_BUILD_DIR
    MODEL_SETTINGS
deps =
    poetry

[testenv:refresh]
description = Short refresh script for charm-dev
commands = 
    /bin/bash -ec "juju destroy-model zookeeper --force --destroy-storage --no-wait"
    /bin/bash -ec "juju add-model zookeeper"
    /bin/bash -ec "charmcraft pack"
    /bin/bash -ec "juju deploy ./*.charm -n 3"

[testenv:format]
description = Apply coding style standards to code
commands =
    poetry install
    poetry export -f requirements.txt -o requirements.txt --without-hashes

    poetry install --only fmt
    poetry run ruff --fix {[vars]all_path}
    poetry run black {[vars]all_path}

[testenv:lint]
description = Check code against coding style standards
commands =
    poetry install --only lint
    poetry run codespell {tox_root} \
        --skip {tox_root}/.git \
        --skip {tox_root}/.tox \
        --skip {tox_root}/build \
        --skip {tox_root}/lib \
        --skip {tox_root}/venv \
        --skip {tox_root}/.mypy_cache \
        --skip {tox_root}/icon.svg \
        --skip {tox_root}/poetry.lock

    poetry run ruff {[vars]all_path}
    poetry run black --check --diff {[vars]all_path}

    poetry install
    poetry run pyright

[testenv:unit]
description = Run unit tests
commands =
    poetry install --with unit
    poetry run coverage run --source={[vars]src_path} \
        -m pytest -v --tb native -s {posargs} {[vars]tests_path}/unit
    poetry run coverage report

[testenv:integration-{provider,password-rotation,tls,upgrade,ha}]
description = Run integration tests
pass_env =
    {[testenv]pass_env}
    CI
    CI_PACKED_CHARMS
commands =
    poetry install --with integration
    poetry run pytest -vv --tb native --log-cli-level=INFO -s {posargs} {[vars]tests_path}/integration/{env:TEST_FILE}